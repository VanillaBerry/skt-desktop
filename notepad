/*
void MainWindow::closeEvent(QCloseEvent *event) {
    if ( какое-то условие ) {
        ...                           //что-то делаем
        event->accept();   //подтверждаем событие - добросовестно закрываем приложение
    } else {
        ...                           //что-то делаем
        event->ignore();   //игнорируем событие
    }
}*/


/*{
        treeView = new QTreeView(this);
        setCentralWidget(treeView);
        standardModel = new QStandardItemModel ;
        QStandardItem *rootNode = standardModel->invisibleRootItem();

        //defining a couple of items
        QStandardItem *americaItem = new QStandardItem("America");
        QStandardItem *mexicoItem =  new QStandardItem("Canada");
        QStandardItem *usaItem =     new QStandardItem("USA");
        QStandardItem *bostonItem =  new QStandardItem("Boston");
        QStandardItem *europeItem =  new QStandardItem("Europe");
        QStandardItem *italyItem =   new QStandardItem("Italy");
        QStandardItem *romeItem =    new QStandardItem("Rome");
        QStandardItem *veronaItem =  new QStandardItem("Verona");

        //building up the hierarchy
        rootNode->    appendRow(americaItem);
        rootNode->    appendRow(europeItem);
        americaItem-> appendRow(mexicoItem);
        americaItem-> appendRow(usaItem);
        usaItem->     appendRow(bostonItem);
        europeItem->  appendRow(italyItem);
        italyItem->   appendRow(romeItem);
        italyItem->   appendRow(veronaItem);

        //register the model
        treeView->setModel(standardModel);
        treeView->expandAll();

        //selection changes shall trigger a slot
        QItemSelectionModel *selectionModel= treeView->selectionModel();
        connect(selectionModel, SIGNAL(selectionChanged (const QItemSelection &, const QItemSelection &)),
                this, SLOT(selectionChangedSlot(const QItemSelection &, const QItemSelection &)));
    }*/

        //Шаблон:connect(sender, &Sender::valueChanged,  receiver, &Receiver::updateValue);
// QObject::connect(&w, SIGNAL(closing()), &a, SLOT (quit()));


// QTreeView * treeView = new QTreeView(ui->scrollArea_tree);


В следующем примере показана вставка с помощью поименованного параметра:

     QSqlQuery query;
     query.prepare("INSERT INTO employee (id, name, salary) "
                   "VALUES (:id, :name, :salary)");
     query.bindValue(":id", 1001);
     query.bindValue(":name", "Thad Beaumont");
     query.bindValue(":salary", 65000);
     query.exec();

В этом примере показана вставка с помощью позиционного параметра:

     QSqlQuery query;
     query.prepare("INSERT INTO employee (id, name, salary) "
                   "VALUES (?, ?, ?)");
     query.addBindValue(1001);
     query.addBindValue("Thad Beaumont");
     query.addBindValue(65000);
     query.exec();

/*

QStandardItem *rightItem = new QStandardItem("RIGHT");
QStandardItem *leftItem = new QStandardItem("LEFT");

QStandardItem *Item1 = new QStandardItem("1");
QStandardItem *Item2 = new QStandardItem("2");
QStandardItem *Item3 = new QStandardItem("3");
QStandardItem *Item4 = new QStandardItem("4");

rootNode->appendRow(rightItem);
rootNode->appendRow(leftItem);

rightItem->appendRow(Item1);
rightItem->appendRow(Item2);

leftItem->appendRow(Item3);
leftItem->appendRow(Item4);

*/
